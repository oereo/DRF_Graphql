{"ast":null,"code":"var _jsxFileName = \"/Users/woot_1/PycharmProjects/graphql-practice/front-app/src/User.js\";\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst QUERY_USERS = gql`\n  query {\n    actors {\n      id\n      name\n    }\n}\n`;\nexport function UserInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_USERS, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  }); // should handle loading status\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n\n  /*#__PURE__*/\n  React.createElement(QUERY_USERS, {\n    query: GET_CONTINENTS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, \"return data.actors.map((\", (id, name), \") => (\", /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"User - \", id, \": \", name)), \"));\");\n}","map":{"version":3,"sources":["/Users/woot_1/PycharmProjects/graphql-practice/front-app/src/User.js"],"names":["React","useQuery","gql","QUERY_USERS","UserInfo","data","loading","pollInterval","GET_CONTINENTS","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AACA,SAAQC,GAAR,QAAkB,cAAlB;AAEA,MAAMC,WAAW,GAAGD,GAAI;;;;;;;CAAxB;AASA,OAAO,SAASE,QAAT,GAAoB;AACvB;AACA;AACA;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBL,QAAQ,CAC5BE,WAD4B,EACf;AACTI,IAAAA,YAAY,EAAE,GADL,CACS;;AADT,GADe,CAAhC,CAJuB,CAUvB;;AACA,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACb;AAAA,sBAAC,WAAD;AAAa,IAAA,KAAK,EAAEE,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAC6BC,EAAE,EAAEC,IADjC,0BAEI;AAAK,IAAA,GAAG,EAAED,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACYA,EADZ,QACkBC,IADlB,CADJ,CAFJ;AASH","sourcesContent":["import React from 'react';\nimport {useQuery} from 'react-apollo';\nimport {gql} from 'apollo-boost';\n\nconst QUERY_USERS = gql`\n  query {\n    actors {\n      id\n      name\n    }\n}\n`;\n\nexport function UserInfo() {\n    // Polling: provides near-real-time synchronization with\n    // your server by causing a query to execute periodically\n    // at a specified interval\n    const {data, loading} = useQuery(\n        QUERY_USERS, {\n            pollInterval: 500 // refetch the result every 0.5 second\n        }\n    );\n\n    // should handle loading status\n    if (loading) return <p>Loading...</p>;\n    <QUERY_USERS query={GET_CONTINENTS}>\n        return data.actors.map(({id, name}) => (\n        <div key={id}>\n            <p>\n                User - {id}: {name}\n            </p>\n        </div>\n        ));\n    </QUERY_USERS>\n}\n"]},"metadata":{},"sourceType":"module"}